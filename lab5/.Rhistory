return(processors[ix,y])
}
################################################################
################################################################
# This function extracts the interesting data columns for the given benchmark
# program and returns a dataframe with these columns.
extract_data <- function(benchmark) {
temp <- paste(paste("Spec",benchmark,sep=""),"..average.base.", sep="")
# perf = the performance reported in the database
perf <- get_column(benchmark,temp)
#nperf = performance normalized to the overall range
max_perf <- max(perf)
min_perf <- min(perf)
range <- max_perf - min_perf
nperf <- 100 * (perf - min_perf) / range
clock <- get_column(benchmark,"Processor.Clock..MHz.")
threads <- get_column(benchmark,"Threads.core")
cores <- get_column(benchmark,"Cores")
TDP <- get_column(benchmark,"TDP")
transistors <- get_column(benchmark,"Transistors..millions.")
dieSize <- get_column(benchmark,"Die.size..mm.2.")
voltage <- get_column(benchmark,"Voltage..low.")
featureSize <- get_column(benchmark,"Feature.Size..microns.")
channel <- get_column(benchmark,"Channel.length..microns.")
FO4delay <- get_column(benchmark,"FO4.Delay..ps.")
L1icache <- get_column(benchmark,"L1..instruction...on.chip.")
L1dcache <- get_column(benchmark,"L1..data...on.chip.")
L2cache <- get_column(benchmark,"L2..on.chip.")
L3cache <- get_column(benchmark,"L3..on.chip.")
###
clock
threads
cores
TDP
transistors
dieSize
voltage
featureSize
channel
FO4delay
L1icache
L1dcache
L2cache
L3cache
###
return(data.frame(nperf,perf,clock,threads,cores,TDP,transistors,dieSize,voltage,featureSize,channel,FO4delay,L1icache,L1dcache,L2cache,L3cache))
}
################################################################
# Extract a new data frame for each of the benchmark programs available in the data set.
int92.dat <- extract_data("Int1992")
fp92.dat <- extract_data("Fp1992")
int95.dat <- extract_data("Int1995")
fp95.dat <- extract_data("Fp1995")
int00.dat <- extract_data("Int2000")
fp00.dat <- extract_data("Fp2000")
int06.dat <- extract_data("Int2006")
fp06.dat <- extract_data("Fp2006")
# starting lab 5
xList <- list(.1,.2,.3,.4,.5,.6,.7,.8,.9)
int95_1 <- NULL
int95_2 <- NULL
int95_3 <- NULL
int95_4 <- NULL
int95_5 <- NULL
int95_6 <- NULL
int95_7 <- NULL
int95_8 <- NULL
int95_9 <- NULL
yList <- list(int95_1,int95_2,int95_3,int95_4,int95_5,int95_6,int95_7,int95_8,int95_9)
for (x in 1:9) {
deltaConcat <- 0
for (y in 1:100){
rows <- nrow(int00.dat)
f <- x*0.1
upper_bound <- floor(f * rows)
permuted_int00.dat <- int00.dat[sample(rows) , ]
train.dat <- permuted_int00.dat[1:upper_bound, ]
test.dat <- permuted_int00.dat[(upper_bound+1): rows, ]
int00_new.lm <- lm(nperf ~ clock + cores, data = train.dat)
predicted.dat <- predict(int00_new.lm, newdata=test.dat)
delta <- predicted.dat - test.dat$nperf
deltaConcat <- c(deltaConcat, delta)
}
#plot(deltaConcat)
# int95set[x] = t.test(deltaConcat, conf.level=0.95)
# Find the mean and confidence interval for this vector of example data.
yList[x] = t.test(deltaConcat, conf.level=0.95)
# # Extract the mean of this vector from the confidence interval calculation
# ci_of_x$estimate
# # Show the two confidence intervals
# ci_of_x$conf.int
# # Extract the lower bound of the confidence interval
# ci_of_x$conf.int[1]
# # Extract the upper bound of the confidence interval
# ci_of_x$conf.int[2]
}
# plot(x, y, ylim = range(c(ylow, yhigh)))
# arrows(x, ylow, x, yhigh, length=0.05, angle=90, code=3)
# ---
#
# # Make up some data for the plot.
# # (You will, of course, want to use your own data.)
# x <- 1:5
# y <- c(23, 14, 15, 45, 8)
# ylow <- y-2*x
# yhigh <- y+2.3*x
#
# # Plot the data with error bars
# plot(x, y, ylim = range(c(ylow, yhigh)))
# arrows(x, ylow, x, yhigh, length=0.05, angle=90, code=3)
View(yList)
View(yList)
# Before running these functions, make sure the file "all-data.csv" is
# in the local directory.
# Also, within the R environment, change the working directory to the directory
# that contains the data file using the toolbar menu:
# File -> Change dir
#
# Read the data from the csv file.
processors <- read.csv("all-data.csv")
################################################################
#
# This function returns the data from the desired column.
# Example:  clock<-get_column("Fp2000","Processor.Clock..MHz.")
get_column <- function(x,y) {
# x = string with the name of the desired benchmark
# y = desired column
#
# Find the indices of all rows that have an entry for the
# indicated benchmark
benchmark <- paste(paste("Spec",x,sep=""),"..average.base.",
sep="")
ix <- !is.na(processors[,benchmark])
return(processors[ix,y])
}
################################################################
################################################################
# This function extracts the interesting data columns for the given benchmark
# program and returns a dataframe with these columns.
extract_data <- function(benchmark) {
temp <- paste(paste("Spec",benchmark,sep=""),"..average.base.", sep="")
# perf = the performance reported in the database
perf <- get_column(benchmark,temp)
#nperf = performance normalized to the overall range
max_perf <- max(perf)
min_perf <- min(perf)
range <- max_perf - min_perf
nperf <- 100 * (perf - min_perf) / range
clock <- get_column(benchmark,"Processor.Clock..MHz.")
threads <- get_column(benchmark,"Threads.core")
cores <- get_column(benchmark,"Cores")
TDP <- get_column(benchmark,"TDP")
transistors <- get_column(benchmark,"Transistors..millions.")
dieSize <- get_column(benchmark,"Die.size..mm.2.")
voltage <- get_column(benchmark,"Voltage..low.")
featureSize <- get_column(benchmark,"Feature.Size..microns.")
channel <- get_column(benchmark,"Channel.length..microns.")
FO4delay <- get_column(benchmark,"FO4.Delay..ps.")
L1icache <- get_column(benchmark,"L1..instruction...on.chip.")
L1dcache <- get_column(benchmark,"L1..data...on.chip.")
L2cache <- get_column(benchmark,"L2..on.chip.")
L3cache <- get_column(benchmark,"L3..on.chip.")
###
clock
threads
cores
TDP
transistors
dieSize
voltage
featureSize
channel
FO4delay
L1icache
L1dcache
L2cache
L3cache
###
return(data.frame(nperf,perf,clock,threads,cores,TDP,transistors,dieSize,voltage,featureSize,channel,FO4delay,L1icache,L1dcache,L2cache,L3cache))
}
################################################################
# Extract a new data frame for each of the benchmark programs available in the data set.
int92.dat <- extract_data("Int1992")
fp92.dat <- extract_data("Fp1992")
int95.dat <- extract_data("Int1995")
fp95.dat <- extract_data("Fp1995")
int00.dat <- extract_data("Int2000")
fp00.dat <- extract_data("Fp2000")
int06.dat <- extract_data("Int2006")
fp06.dat <- extract_data("Fp2006")
# starting lab 5
xList <- list(.1,.2,.3,.4,.5,.6,.7,.8,.9)
int95_1 <- NULL
int95_2 <- NULL
int95_3 <- NULL
int95_4 <- NULL
int95_5 <- NULL
int95_6 <- NULL
int95_7 <- NULL
int95_8 <- NULL
int95_9 <- NULL
yList <- list(int95_1,int95_2,int95_3,int95_4,int95_5,int95_6,int95_7,int95_8,int95_9)
for (x in 1:9) {
deltaConcat <- 0
for (y in 1:100){
rows <- nrow(int00.dat)
f <- x*0.1
upper_bound <- floor(f * rows)
permuted_int00.dat <- int00.dat[sample(rows) , ]
train.dat <- permuted_int00.dat[1:upper_bound, ]
test.dat <- permuted_int00.dat[(upper_bound+1): rows, ]
int00_new.lm <- lm(nperf ~ clock + cores, data = train.dat)
predicted.dat <- predict(int00_new.lm, newdata=test.dat)
delta <- predicted.dat - test.dat$nperf
deltaConcat <- c(deltaConcat, delta)
}
#plot(deltaConcat)
# int95set[x] = t.test(deltaConcat, conf.level=0.95)
# Find the mean and confidence interval for this vector of example data.
print(x)
yList[x] = t.test(deltaConcat, conf.level=0.95)
# # Extract the mean of this vector from the confidence interval calculation
# ci_of_x$estimate
# # Show the two confidence intervals
# ci_of_x$conf.int
# # Extract the lower bound of the confidence interval
# ci_of_x$conf.int[1]
# # Extract the upper bound of the confidence interval
# ci_of_x$conf.int[2]
}
# plot(x, y, ylim = range(c(ylow, yhigh)))
# arrows(x, ylow, x, yhigh, length=0.05, angle=90, code=3)
# ---
#
# # Make up some data for the plot.
# # (You will, of course, want to use your own data.)
# x <- 1:5
# y <- c(23, 14, 15, 45, 8)
# ylow <- y-2*x
# yhigh <- y+2.3*x
#
# # Plot the data with error bars
# plot(x, y, ylim = range(c(ylow, yhigh)))
# arrows(x, ylow, x, yhigh, length=0.05, angle=90, code=3)
# Before running these functions, make sure the file "all-data.csv" is
# in the local directory.
# Also, within the R environment, change the working directory to the directory
# that contains the data file using the toolbar menu:
# File -> Change dir
#
# Read the data from the csv file.
processors <- read.csv("all-data.csv")
################################################################
#
# This function returns the data from the desired column.
# Example:  clock<-get_column("Fp2000","Processor.Clock..MHz.")
get_column <- function(x,y) {
# x = string with the name of the desired benchmark
# y = desired column
#
# Find the indices of all rows that have an entry for the
# indicated benchmark
benchmark <- paste(paste("Spec",x,sep=""),"..average.base.",
sep="")
ix <- !is.na(processors[,benchmark])
return(processors[ix,y])
}
################################################################
################################################################
# This function extracts the interesting data columns for the given benchmark
# program and returns a dataframe with these columns.
extract_data <- function(benchmark) {
temp <- paste(paste("Spec",benchmark,sep=""),"..average.base.", sep="")
# perf = the performance reported in the database
perf <- get_column(benchmark,temp)
#nperf = performance normalized to the overall range
max_perf <- max(perf)
min_perf <- min(perf)
range <- max_perf - min_perf
nperf <- 100 * (perf - min_perf) / range
clock <- get_column(benchmark,"Processor.Clock..MHz.")
threads <- get_column(benchmark,"Threads.core")
cores <- get_column(benchmark,"Cores")
TDP <- get_column(benchmark,"TDP")
transistors <- get_column(benchmark,"Transistors..millions.")
dieSize <- get_column(benchmark,"Die.size..mm.2.")
voltage <- get_column(benchmark,"Voltage..low.")
featureSize <- get_column(benchmark,"Feature.Size..microns.")
channel <- get_column(benchmark,"Channel.length..microns.")
FO4delay <- get_column(benchmark,"FO4.Delay..ps.")
L1icache <- get_column(benchmark,"L1..instruction...on.chip.")
L1dcache <- get_column(benchmark,"L1..data...on.chip.")
L2cache <- get_column(benchmark,"L2..on.chip.")
L3cache <- get_column(benchmark,"L3..on.chip.")
###
clock
threads
cores
TDP
transistors
dieSize
voltage
featureSize
channel
FO4delay
L1icache
L1dcache
L2cache
L3cache
###
return(data.frame(nperf,perf,clock,threads,cores,TDP,transistors,dieSize,voltage,featureSize,channel,FO4delay,L1icache,L1dcache,L2cache,L3cache))
}
################################################################
# Extract a new data frame for each of the benchmark programs available in the data set.
int92.dat <- extract_data("Int1992")
fp92.dat <- extract_data("Fp1992")
int95.dat <- extract_data("Int1995")
fp95.dat <- extract_data("Fp1995")
int00.dat <- extract_data("Int2000")
fp00.dat <- extract_data("Fp2000")
int06.dat <- extract_data("Int2006")
fp06.dat <- extract_data("Fp2006")
# starting lab 5
xList <- list(.1,.2,.3,.4,.5,.6,.7,.8,.9)
int95_1 <- NULL
int95_2 <- NULL
int95_3 <- NULL
int95_4 <- NULL
int95_5 <- NULL
int95_6 <- NULL
int95_7 <- NULL
int95_8 <- NULL
int95_9 <- NULL
yList <- list(int95_1,int95_2,int95_3,int95_4,int95_5,int95_6,int95_7,int95_8,int95_9)
for (x in 1:9) {
deltaConcat <- 0
for (y in 1:100){
rows <- nrow(int00.dat)
f <- x*0.1
upper_bound <- floor(f * rows)
permuted_int00.dat <- int00.dat[sample(rows) , ]
train.dat <- permuted_int00.dat[1:upper_bound, ]
test.dat <- permuted_int00.dat[(upper_bound+1): rows, ]
int00_new.lm <- lm(nperf ~ clock + cores, data = train.dat)
predicted.dat <- predict(int00_new.lm, newdata=test.dat)
delta <- predicted.dat - test.dat$nperf
deltaConcat <- c(deltaConcat, delta)
}
#plot(deltaConcat)
# int95set[x] = t.test(deltaConcat, conf.level=0.95)
# Find the mean and confidence interval for this vector of example data.
print(x)
yList[x] = t.test(deltaConcat, conf.level=0.95)
# # Extract the mean of this vector from the confidence interval calculation
# ci_of_x$estimate
# # Show the two confidence intervals
# ci_of_x$conf.int
# # Extract the lower bound of the confidence interval
# ci_of_x$conf.int[1]
# # Extract the upper bound of the confidence interval
# ci_of_x$conf.int[2]
}
# plot(x, y, ylim = range(c(ylow, yhigh)))
# arrows(x, ylow, x, yhigh, length=0.05, angle=90, code=3)
# ---
#
# # Make up some data for the plot.
# # (You will, of course, want to use your own data.)
# x <- 1:5
# y <- c(23, 14, 15, 45, 8)
# ylow <- y-2*x
# yhigh <- y+2.3*x
#
# # Plot the data with error bars
# plot(x, y, ylim = range(c(ylow, yhigh)))
# arrows(x, ylow, x, yhigh, length=0.05, angle=90, code=3)
View(yList)
View(xList)
View(yList)
# Before running these functions, make sure the file "all-data.csv" is
# in the local directory.
# Also, within the R environment, change the working directory to the directory
# that contains the data file using the toolbar menu:
# File -> Change dir
#
# Read the data from the csv file.
processors <- read.csv("all-data.csv")
################################################################
#
# This function returns the data from the desired column.
# Example:  clock<-get_column("Fp2000","Processor.Clock..MHz.")
get_column <- function(x,y) {
# x = string with the name of the desired benchmark
# y = desired column
#
# Find the indices of all rows that have an entry for the
# indicated benchmark
benchmark <- paste(paste("Spec",x,sep=""),"..average.base.",
sep="")
ix <- !is.na(processors[,benchmark])
return(processors[ix,y])
}
################################################################
################################################################
# This function extracts the interesting data columns for the given benchmark
# program and returns a dataframe with these columns.
extract_data <- function(benchmark) {
temp <- paste(paste("Spec",benchmark,sep=""),"..average.base.", sep="")
# perf = the performance reported in the database
perf <- get_column(benchmark,temp)
#nperf = performance normalized to the overall range
max_perf <- max(perf)
min_perf <- min(perf)
range <- max_perf - min_perf
nperf <- 100 * (perf - min_perf) / range
clock <- get_column(benchmark,"Processor.Clock..MHz.")
threads <- get_column(benchmark,"Threads.core")
cores <- get_column(benchmark,"Cores")
TDP <- get_column(benchmark,"TDP")
transistors <- get_column(benchmark,"Transistors..millions.")
dieSize <- get_column(benchmark,"Die.size..mm.2.")
voltage <- get_column(benchmark,"Voltage..low.")
featureSize <- get_column(benchmark,"Feature.Size..microns.")
channel <- get_column(benchmark,"Channel.length..microns.")
FO4delay <- get_column(benchmark,"FO4.Delay..ps.")
L1icache <- get_column(benchmark,"L1..instruction...on.chip.")
L1dcache <- get_column(benchmark,"L1..data...on.chip.")
L2cache <- get_column(benchmark,"L2..on.chip.")
L3cache <- get_column(benchmark,"L3..on.chip.")
###
clock
threads
cores
TDP
transistors
dieSize
voltage
featureSize
channel
FO4delay
L1icache
L1dcache
L2cache
L3cache
###
return(data.frame(nperf,perf,clock,threads,cores,TDP,transistors,dieSize,voltage,featureSize,channel,FO4delay,L1icache,L1dcache,L2cache,L3cache))
}
################################################################
# Extract a new data frame for each of the benchmark programs available in the data set.
int92.dat <- extract_data("Int1992")
fp92.dat <- extract_data("Fp1992")
int95.dat <- extract_data("Int1995")
fp95.dat <- extract_data("Fp1995")
int00.dat <- extract_data("Int2000")
fp00.dat <- extract_data("Fp2000")
int06.dat <- extract_data("Int2006")
fp06.dat <- extract_data("Fp2006")
# starting lab 5
xList <- list(.1,.2,.3,.4,.5,.6,.7,.8,.9)
int95_1 <- 0
int95_2 <- 0
int95_3 <- 0
int95_4 <- 0
int95_5 <- 0
int95_6 <- 0
int95_7 <- 0
int95_8 <- 0
int95_9 <- 0
yList <- list(int95_1,int95_2,int95_3,int95_4,int95_5,int95_6,int95_7,int95_8,int95_9)
for (x in 1:9) {
deltaConcat <- 0
for (y in 1:100){
rows <- nrow(int00.dat)
f <- x*0.1
upper_bound <- floor(f * rows)
permuted_int00.dat <- int00.dat[sample(rows) , ]
train.dat <- permuted_int00.dat[1:upper_bound, ]
test.dat <- permuted_int00.dat[(upper_bound+1): rows, ]
int00_new.lm <- lm(nperf ~ clock + cores, data = train.dat)
predicted.dat <- predict(int00_new.lm, newdata=test.dat)
delta <- predicted.dat - test.dat$nperf
deltaConcat <- c(deltaConcat, delta)
}
#plot(deltaConcat)
# int95set[x] = t.test(deltaConcat, conf.level=0.95)
# Find the mean and confidence interval for this vector of example data.
print(x)
yList[x] = t.test(deltaConcat, conf.level=0.95)
# # Extract the mean of this vector from the confidence interval calculation
# ci_of_x$estimate
# # Show the two confidence intervals
# ci_of_x$conf.int
# # Extract the lower bound of the confidence interval
# ci_of_x$conf.int[1]
# # Extract the upper bound of the confidence interval
# ci_of_x$conf.int[2]
}
# plot(x, y, ylim = range(c(ylow, yhigh)))
# arrows(x, ylow, x, yhigh, length=0.05, angle=90, code=3)
# ---
#
# # Make up some data for the plot.
# # (You will, of course, want to use your own data.)
# x <- 1:5
# y <- c(23, 14, 15, 45, 8)
# ylow <- y-2*x
# yhigh <- y+2.3*x
#
# # Plot the data with error bars
# plot(x, y, ylim = range(c(ylow, yhigh)))
# arrows(x, ylow, x, yhigh, length=0.05, angle=90, code=3)
View(yList)
